{"task_id": "HumanEval/23", "completion": "if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n\ndef strrev(string: str) -> str:\n    \"\"\" Return reversed string\n    >>> strrev('')\n    ''\n    >>> strrev('abc')\n    'cba'\n    \"\"\"\n    if string == '':\n        return string\n    else:\n        return strrev(string[1:]) + string[0]\n\n\ndef strsub(string: str, sub: str) -> int:\n    \"\"\" Return number of occurrences of sub in string\n    >>> strsub('', '')\n    1\n    >>> strsub('abc', '')\n    1\n    >>> strsub('abc', 'a')\n    1\n    >>> strsub('abc', 'abc')\n    1\n    >>> strsub('abcabc', 'abc')\n    2\n    >>> strsub('abcabc', 'b')\n    2\n    \"\"\"\n    if string == '':\n        if sub == '':\n            return 1\n        else:\n            return 0\n    elif sub == '':\n        return 1\n    elif string[0] == sub[0]:\n        if len(sub) == 1:\n            return 1 + strsub(string[1:], sub)\n        else:\n            return strsub(string[1:], sub[1:])\n    else:\n        return strsub(string[1:], sub)\n\n\ndef strrep(string: str, sub: str, rep: str) -> str:\n    \"\"\" Replace all occurrences of sub in string with rep\n    >>> strrep('', 'a', 'b')\n    ''\n    >>> strrep('a', 'a', 'b')\n    'b'\n    >>> strrep('aaa', 'a', 'b')\n    'bbb'\n    >>> strrep('abcabc', 'abc', '123')\n    '123123'\n    \"\"\"\n    if string == '':\n        return string\n    elif string[:len(sub)] == sub:\n        return rep + strrep(string[len(sub):], sub, rep)\n    else:"}
{"task_id": "HumanEval/69", "completion": "from collections import Counter\n    c = Counter(lst)\n    for i in sorted(c.keys(), reverse=True):\n        if c[i] >= i:\n            return i\n    return -1"}
{"task_id": "HumanEval/104", "completion": "def has_even_digit(n):\n        while n > 0:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False"}
{"task_id": "HumanEval/53", "completion": "return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract y from x\n    >>> subtract(5, 3)\n    2\n    >>> subtract(7, 2)\n    5\n   \n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide x by y\n    >>> divide(6, 3)\n    2\n    >>> divide(35, 7)\n    5\n    \"\"\"\n    if y != 0:\n        return x // y\n    else:\n        return \"Error: Division by zero\"\n\n\ndef power(x: int, y: int):\n    \"\"\"Raise x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n    \"\"\"\n    return x ** y\n\n\ndef square_root(x: int):\n    \"\"\"Calculate the square root of x\n    >>> square_root(4)\n    2\n    >>> square_root(16)\n    4\n    \"\"\"\n    return x ** 0.5\n\n\ndef cube_root(x: int):\n    \"\"\"Calculate the cube root of x\n    >>> cube_root(8)\n    2\n    >>> cube_root(27)\n    3\n    \"\"\"\n    return x ** (1. / 3.)\n\n\ndef factorial(x: int):\n    \"\"\"Calculate the factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(4)\n    24\n    \"\"\"\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\n\n\ndef logarithm(x: int, base: int = 10):\n    \"\"\"Calculate the logarithm of x with the given base\n    >>> logarithm"}
{"task_id": "HumanEval/163", "completion": "if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_v2(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_v2(2, 8) => [2, 4, 6, 8]\n    generate_integers_v2(8, 2) => [2, 4, 6, 8]\n    generate_integers_v2(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_v3(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_v3(2, 8) => [2, 4, 6, 8]\n    generate_integers_v3(8, 2) => [2, 4, 6, 8]\n    generate_integers_v3(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_v4(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_v4(2, 8) => [2, 4, 6, 8]\n    generate_integers_v4(8, 2) => [2, 4, 6, 8]\n    generate_integers_v4(10, 14) => []\n    \"\"\""}
{"task_id": "HumanEval/105", "completion": "names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [i for i in arr if 1 <= i <= 9]\n    arr.sort(reverse=True)\n    return [names[i-1] for i in arr]"}
{"task_id": "HumanEval/101", "completion": "return s.replace(',', '').split()\n\n\ndef main():\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three, four, five, six\"))"}
{"task_id": "HumanEval/161", "completion": "if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])"}
{"task_id": "HumanEval/65", "completion": "digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n\ndef is_prime(n):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_circular_prime(n):\n    \"\"\"Check if n is a circular prime.\n    A circular prime is a prime number that remains prime even after its digits are\n    cyclically shifted.\n    >>> is_circular_prime(11)\n    True\n    >>> is_circular_prime(13)\n    True\n    >>> is_circular_prime(19)\n    True\n    \"\"\"\n    digits = str(n)\n    for i in range(len(digits)):\n        if not is_prime(int(circular_shift(n, i))):\n            return False\n    return True\n\n\ndef count_circular_primes(n):\n    \"\"\"Count the number of circular primes less than n.\n    >>> count_circular_primes(100)\n    13\n    \"\"\"\n    return sum(is_circular_prime(i) for i in range(n))"}
{"task_id": "HumanEval/48", "completion": "return text == text[::-1]\n\n\ndef is_prime(n: int):\n    \"\"\"\n    Checks if given number is a prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** rt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_even(n: int):\n    \"\"\"\n    Checks if given number is even\n    >>> is_even(0)\n    True\n    >>> is_even(3)\n    False\n    >>> is_even(4)\n    True\n    \"\"\"\n    return n % 2 == 0\n\n\ndef is_odd(n: int):\n    \"\"\"\n    Checks if given number is odd\n    >>> is_odd(1)\n    True\n    >>> is_odd(2)\n    False\n    >>> is_odd(3)\n    True\n    \"\"\"\n    return n % 2 != 0\n\n\ndef is_leap_year(year: int):\n    \"\"\"\n    Checks if given year is a leap year\n    >>> is_leap_year(2000)\n    True\n    >>> is_leap_year(1900)\n    False\n    >>> is_leap_year(2004)\n    True\n    \"\"\"\n    if year % 4 != 0:\n        return False\n    elif year % 100 != 0:\n        return True\n    elif year % 400 != 0:\n        return False\n    else:\n        return True\n\n\ndef is_triangle(a: int, b: int, c: int):\n    \"\"\"\n    Checks if given lengths can form a triangle\n    >>> is_triangle(3, 4, 5)\n    True\n    >>> is_triangle(1, 1, 3)\n    False\n    >>> is_triangle(1, 2, 3)"}
{"task_id": "HumanEval/6", "completion": "result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/130", "completion": "if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n    elif n == 2:\n        return [0, 3, 2]\n    else:\n        sequence = [0, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence"}
{"task_id": "HumanEval/125", "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)"}
{"task_id": "HumanEval/67", "completion": "s = s.split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    total_fruits = int(n)\n    mangoes = total_fruits - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/19", "completion": "num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))"}
{"task_id": "HumanEval/76", "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n    return True"}
{"task_id": "HumanEval/36", "completion": "count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/16", "completion": "return len(set(string.lower()))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v2('xyzXYZ')\n    3\n    >>> count_distinct_characters_v2('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v3('xyzXYZ')\n    3\n    >>> count_distinct_characters_v3('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v4('xyzXYZ')\n    3\n    >>> count_distinct_characters_v4('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v5(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v5('xyzXYZ')\n    3\n    >>> count_distinct_characters_v5('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v6(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v6('xyzXYZ')\n    3\n    >>> count_distinct_characters_v6('Jerry')\n    4\n    \"\"\""}
{"task_id": "HumanEval/149", "completion": "lst = [i for i in lst if len(i) % 2 == 0]\n    return sorted(lst)"}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True"}
