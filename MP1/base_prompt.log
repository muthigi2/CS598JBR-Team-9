2025-09-07 13:26:16.359120: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:467] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1757251576.381305   13585 cuda_dnn.cc:8579] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1757251576.387802   13585 cuda_blas.cc:1407] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
W0000 00:00:1757251576.404765   13585 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1757251576.404795   13585 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1757251576.404798   13585 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1757251576.404801   13585 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
2025-09-07 13:26:16.409861: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Working with deepseek-ai/deepseek-coder-6.7b-base quantization True...
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [01:01<01:01, 61.72s/it]Loading checkpoint shards: 100%|██████████| 2/2 [01:22<00:00, 37.84s/it]Loading checkpoint shards: 100%|██████████| 2/2 [01:22<00:00, 41.42s/it]
Task_ID HumanEval/126:
Prompt:

def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''

Response:
    if len(lst) == 1:
        return True
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True


def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1, 3, 2, 4, 5]) ➞ False
    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True
    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True
    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False
    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True
    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False
    '''
    if len(lst) == 1:
        return True
    for i in range(len(lst) - 1):
        if lst[i] > lst[i + 1]:
            return False
    return True


def is_sorted(lst):
    '''
    Given a list of numbers, return whether or not they are sorted
    in ascending order. If list has more than 1 duplicate of the same
    number, return False. Assume no negative numbers and only integers.

    Examples
    is_sorted([5]) ➞ True
    is_sorted([1, 2, 3, 4, 5]) ➞ True
    is_sorted([1,
Task_ID HumanEval/79:
Prompt:

def decimal_to_binary(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    binary format. The function should return a string, with each character representing a binary
    number. Each character in the string will be '0' or '1'.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_binary(15)   # returns "db1111db"
    decimal_to_binary(32)   # returns "db100000db"
    """

Response:
    binary = bin(decimal)[2:]
    return f"db{binary}db"


def binary_to_decimal(binary):
    """You will be given a string, with each character representing a binary number.
    Your task is to convert the binary to decimal format. The function should return an integer.

    The string will be 'db' followed by a binary number, and then 'db' again.

    Examples:
    binary_to_decimal("db1111db")   # returns 15
    binary_to_decimal("db100000db")   # returns 32
    """
    binary = binary[2:-2]
    return int(binary, 2)


def decimal_to_hexadecimal(decimal):
    """You will be given a number in decimal form and your task is to convert it to
    hexadecimal format. The function should return a string, with each character representing a hexadecimal
    number. Each character in the string will be a number from 0-9 or a letter from A-F.

    There will be an extra couple of characters 'db' at the beginning and at the end of the string.
    The extra characters are there to help with the format.

    Examples:
    decimal_to_hexadecimal(15)   # returns "dbFdb"
    decimal_to_hexadecimal(32)   # returns "db20db"
    """
    hexadecimal = hex(decimal)[2:]
    return f"db{hexadecimal}db"


def hexadecimal_to_decimal(hexadecimal):
    """You will be given a string, with each character representing a hexadecimal number.
    Your task is to convert the hexadecimal to decimal format. The function should return an integer.

    The string will be 'db' followed by a hexadecimal number, and then 'db' again.

    Examples:
    hexadecimal_to_decimal("dbFdb")   # returns 15
    hexadecimal_to_decimal("db20db")   # returns 3
Task_ID HumanEval/23:
Prompt:


def strlen(string: str) -> int:
    """ Return length of given string
    >>> strlen('')
    0
    >>> strlen('abc')
    3
    """

Response:
    if string == '':
        return 0
    return 1 + strlen(string[1:])


def strlen_iter(string: str) -> int:
    """ Return length of given string
    >>> strlen_iter('')
    0
    >>> strlen_iter('abc')
    3
    """
    length = 0
    for _ in string:
        length += 1
    return length


def strlen_iter2(string: str) -> int:
    """ Return length of given string
    >>> strlen_iter2('')
    0
    >>> strlen_iter2('abc')
    3
    """
    length = 0
    while string:
        length += 1
        string = string[1:]
    return length


def strlen_iter3(string: str) - -> int:
    """ Return length of given string
    >>> strlen_iter3('')
    0
    >>> strlen_iter3('abc')
    3
    """
    length = 0
    for _ in s:
        length += 1
    return length


def strlen_iter4(string: str) -> int:
    """ Return length of given string
    >>> strlen_iter4('')
    0
    >>> strlen_iter4('abc')
    3
    """
    length = 0
    for _ in string:
        length += 1
    return length


def strlen_iter5(string: str) -> int:
    """ Return length of given string
    >>> strlen_iter5('')
    0
    >>> strlen_iter5('abc')
    3
    """
    length = 0
    for _ in string:
        length += 1
    return length


def strlen_iter6(string: str) -> int:
    """ Return length of given string
    >>> strlen_iter6('')
    0
    >>> strlen_iter6('abc')
    3
    """
    length = 0
    for _ in string:
        length += 1
    return length


def strlen_iter7(string: str) -> int:
   
Task_ID HumanEval/113:
Prompt:

def odd_count(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """

Response:
    return [f"the number of odd elements {len(list(filter(lambda x: int(x) % 2 != 0, i)))}n the str{len(i)}ng {len(i)} of the {len(i)}nput." for i in lst]


def odd_count_2(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd elements 8n the str8ng 8 of the 8nput."]
    """
    return [f"the number of odd elements {len(list(filter(lambda x: int(x) % 2 != 0, i)))}n the str{len(i)}ng {len(i)} of the {len(i)}nput." for i in lst]


def odd_count_3(lst):
    """Given a list of strings, where each string consists of only digits, return a list.
    Each element i of the output should be "the number of odd elements in the
    string i of the input." where all the i's should be replaced by the number
    of odd digits in the i'th string of the input.

    >>> odd_count(['1234567'])
    ["the number of odd elements 4n the str4ng 4 of the 4nput."]
    >>> odd_count(['3',"11111111"])
    ["the number of odd elements 1n the str1ng 1 of the 1nput.",
     "the number of odd
Task_ID HumanEval/99:
Prompt:

def closest_integer(value):
    '''
    Create a function that takes a value (string) representing a number
    and returns the closest integer to it. If the number is equidistant
    from two integers, round it away from zero.

    Examples
    >>> closest_integer("10")
    10
    >>> closest_integer("15.3")
    15

    Note:
    Rounding away from zero means that if the given number is equidistant
    from two integers, the one you should return is the one that is the
    farthest from zero. For example closest_integer("14.5") should
    return 15 and closest_integer("-14.5") should return -15.
    '''

Response:
    if '.' in value:
        value = value.split('.')
        if int(value[1]) >= 5:
            return int(value[0]) + 1
        else:
            return int(value[0])
    else:
        return int(value)


def main():
    print(closest_integer("10"))
    print(closest_integer("15.3"))
    print(closest
Task_ID HumanEval/2:
Prompt:


def truncate_number(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> truncate_number(3.5)
    0.5
    """

Response:
    return number % 1


def get_decimal_part(number: float) -> float:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the decimal part of the number.
    >>> get_decimal_part(3.5)
    0.5
    """
    return number % 1


def get_integer_part(number: float) -> int:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the integer part of the number.
    >>> get_integer_part(3.5)
    3
    """
    return int(number)


def get_sign(number: float) -> int:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the sign of the number.
    >>> get_sign(3.5)
    1
    >>> get_sign(-3.5)
    -1
    """
    return 1 if number >= 0 else -1


def get_sign_and_integer_part(number: float) -> tuple[int, int]:
    """ Given a positive floating point number, it can be decomposed into
    and integer part (largest integer smaller than given number) and decimals
    (leftover part always smaller than 1).

    Return the sign and integer part of the number.
    >>> get_sign_and_integer_part(3.5)
    (1, 3)
    >>> get_sign_and_integer_part(-3.5)
    (-1, 3)
    """
    return get_sign(number), get_integer_part(number)


def get_sign_and_decimal_part(number: float) -> tuple[int,
Task_ID HumanEval/107:
Prompt:

def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """

Response:
    pass


def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.

    Note:
        1. 1 <= n <= 10^3
        2. returned tuple has the number of even and odd integer palindromes respectively.
    """
    even_count = 0
    odd_count = 0
    for i in range(1, n + 1):
        if str(i) == str(i)[::-1]:
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    return (even_count, odd_count)


def even_odd_palindrome(n):
    """
    Given a positive integer n, return a tuple that has the number of even and odd
    integer palindromes that fall within the range(1, n), inclusive.

    Example 1:

        Input: 3
        Output: (1, 2)
        Explanation:
        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.

    Example 2:

        Input: 12
        Output: (4, 6)
        Explanation:
        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even,
Task_ID HumanEval/66:
Prompt:

def digitSum(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """

Response:
    return sum(ord(c) for c in s if c.isupper())


def digitSum2(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    return sum(ord(c) for c in s if c.isupper())


def digitSum3(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    return sum(ord(c) for c in s if c.isupper())


def digitSum4(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("abcCd") => 67
        digitSum("helloE") => 69
        digitSum("woArBld") => 131
        digitSum("aAaaaXa") => 153
    """
    return sum(ord(c) for c in s if c.isupper())


def digitSum5(s):
    """Task
    Write a function that takes a string as input and returns the sum of the upper characters only'
    ASCII codes.

    Examples:
        digitSum("") => 0
        digitSum("abAB") => 131
        digitSum("
Task_ID HumanEval/75:
Prompt:

def is_multiply_prime(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """

Response:
    pass


def is_multiply_prime_2(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    pass


def is_multiply_prime_3(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    pass


def is_multiply_prime_4(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    pass


def is_multiply_prime_5(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    pass


def is_multiply_prime_6(a):
    """Write a function that returns true if the given number is the multiplication of 3 prime numbers
    and false otherwise.
    Knowing that (a) is less then 100. 
    Example:
    is_multiply_prime(30) == True
    30 = 2 * 3 * 5
    """
    pass


def is_multiply_prime_7(a):
    """Write a function that
Task_ID HumanEval/4:
Prompt:
from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    """ For a given list of input numbers, calculate Mean Absolute Deviation
    around the mean of this dataset.
    Mean Absolute Deviation is the average absolute difference between each
    element and a centerpoint (mean in this case):
    MAD = average | x - x_mean |
    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])
    1.0
    """

Response:
    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)


def mean_absolute_percentage_error(
        predicted: List[float],
        actual: List[float]) -> float:
    """ For a given list of predicted and actual values, calculate Mean
    Absolute Percentage Error (MAPE).
    MAPE = average | (predicted - actual) / actual |
    >>> mean_absolute_percentage_error([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])
    0.0
    """
    return sum(abs(a - p) / a for p, a in zip(predicted, actual)) / len(actual)


def mean_squared_error(
        predicted: List[float],
        actual: List[float]) -> float:
    """ For a given list of predicted and actual values, calculate Mean
    Squared Error (MSE).
    MSE = average (predicted - actual)^2
    >>> mean_squared_error([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])
    0.0
    """
    return sum((p - a) ** 2 for p, a in zip(predicted, actual)) / len(actual)


def root_mean_squared_error(
        predicted: List[float],
        actual: List[float]) -> float:
    """ For a given list of predicted and actual values, calculate Root
    Mean Squared Error (RMSE).
    RMSE = sqrt(MSE)
    >>> root_mean_squared_error([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])
    0.0
    """
    return mean_squared_error(predicted, actual) ** 0
Task_ID HumanEval/102:
Prompt:

def choose_num(x, y):
    """This function takes two positive numbers x and y and returns the
    biggest even integer number that is in the range [x, y] inclusive. If 
    there's no such number, then the function should return -1.

    For example:
    choose_num(12, 15) = 14
    choose_num(13, 12) = -1
    """

Response:
    if x % 2 == 0:
        return x
    elif y % 2 == 0:
        return y
    else:
        return -1


def choose_num_test():
    """Testing choose_num function"""
    assert choose_num(12, 15) == 14
    assert choose_num(13, 12) == -1
    assert choose_num(12, 12) == 12
    assert choose(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 12
    assert choose_num(12, 12) == 
Task_ID HumanEval/18:
Prompt:


def how_many_times(string: str, substring: str) -> int:
    """ Find how many times a given substring can be found in the original string. Count overlaping cases.
    >>> how_many_times('', 'a')
    0
    >>> how_many_times('aaa', 'a')
    3
    >>> how_many_times('aaaa', 'aa')
    3
    """

Response:
    if not string or not substring:
        return 0
    if len(substring) > len(string):
        return 0
    if len(substring) == len(string):
        return 1 if string == substring else 0
    if len(substring) == 1:
        return string.count(substring)
    count = 0
    for i in range(len(string)):
        if string[i:i+len(substring)] == substring:
            count += 1
    return count


if __name__ == '__main__':
    import doctest
    doctest.testmod()
Task_ID HumanEval/161:
Prompt:

def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """

Response:
    s = list(s)
    for i in range(len(s)):
        if s[i].isalpha():
            if s[i].isupper():
                s[i] = s[i].lower()
            else:
                s[i] = s[i].upper()
    return "".join(s)


def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
    solve("#a@C") = "#A@c"
    """
    s = list(s)
    for i in range(len(s)):
        if s[i].isalpha():
            if s[i].isupper():
                s[i] = s[i].lower()
            else:
                s[i] = s[i].upper()
    return "".join(s)


def solve(s):
    """You are given a string s.
    if s[i] is a letter, reverse its case from lower to upper or vise versa, 
    otherwise keep it as it is.
    If the string contains no letters, reverse the string.
    The function should return the resulted string.
    Examples
    solve("1234") = "4321"
    solve("ab") = "AB"
Task_ID HumanEval/139:
Prompt:

def special_factorial(n):
    """The Brazilian factorial is defined as:
    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!
    where n > 0

    For example:
    >>> special_factorial(4)
    288

    The function will receive an integer as input and should return the special
    factorial of this integer.
    """

Response:
    if n == 0:
        return 1
    else:
        return n * special_factorial(n-1)


def main():
    """Main function"""
    print(special_factorial(4))


if __name__ == '__main__':
    main()
Task_ID HumanEval/44:
Prompt:


def change_base(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base(8, 3)
    '22'
    >>> change_base(8, 2)
    '1000'
    >>> change_base(7, 2)
    '111'
    """

Response:
    if x == 0:
        return '0'
    result = ''
    while x > 0:
        result = str(x % base) + result
        x = x // base
    return result


def change_base_recursive(x: int, base: int):
    """Change numerical base of input number x to base.
    return string representation after the conversion.
    base numbers are less than 10.
    >>> change_base_recursive(8, 3)
    '22'
    >>> change_base_recursive(8, 2)
    '1000'
    >>> change
Task_ID HumanEval/51:
Prompt:


def remove_vowels(text):
    """
    remove_vowels is a function that takes string and returns string without vowels.
    >>> remove_vowels('')
    ''
    >>> remove_vowels("abcdef\nghijklm")
    'bcdf\nghjklm'
    >>> remove_vowels('abcdef')
    'bcdf'
    >>> remove_vowels('aaaaa')
    ''
    >>> remove_vowels('aaBAA')
    'B'
    >>> remove_vowels('zbcd')
    'zbcd'
    """

Response:
    vowels = 'aeiouAEIOU'
    result = ''
    for char in text:
        if char not in vowels:
            result += char
    return result


if __name__ == '__main__':
    import doctest
    doctest.testmod()
Task_ID HumanEval/93:
Prompt:

def encode(message):
    """
    Write a function that takes a message, and encodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places ahead of that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> encode('test')
    'TGST'
    >>> encode('This is a message')
    'tHKS KS C MGSSCGG'
    """

Response:
    pass


def decode(message):
    """
    Write a function that takes a message, and decodes in such a 
    way that it swaps case of all letters, replaces all vowels in 
    the message with the letter that appears 2 places behind that 
    vowel in the english alphabet. 
    Assume only letters. 
    
    Examples:
    >>> decode('TGST')
    'test'
    >>> decode('tHKS KS C MGSSCGG')
    'This is a message'
    """
    pass
Task_ID HumanEval/91:
Prompt:

def is_bored(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'.
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """

Response:
    return S.count("I")


def is_bored_2(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    return S.count("I")


def is_bored_3(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'
   
    For example:
    >>> is("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    return S.count("I")


def is_bored_4(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love this weather")
    1
    """
    return S.count("I")


def is_bored_5(S):
    """
    You'll be given a string of words, and your task is to count the number
    of boredoms. A boredom is a sentence that starts with the word "I".
    Sentences are delimited by '.', '?' or '!'
   
    For example:
    >>> is_bored("Hello world")
    0
    >>> is_bored("The sky is blue. The sun is shining. I love
Task_ID HumanEval/14:
Prompt:
from typing import List


def all_prefixes(string: str) -> List[str]:
    """ Return list of all prefixes from shortest to longest of the input string
    >>> all_prefixes('abc')
    ['a', 'ab', 'abc']
    """

Response:
    return [string[:i] for i in range(1, len(string) + 1)]


def all_suffixes(string: str) -> List[str]:
    """ Return list of all suffixes from shortest to longest of the input string
    >>> all_suffixes('abc')
    ['c', 'bc', 'abc']
    """
    return [string[i:] for i in range(len(string))]


def all_substrings(string: str) -> List[str]:
    """ Return list of all substrings from shortest to longest of the input string
    >>> all_substrings('abc')
    ['a', 'ab', 'abc', 'b', 'bc', 'c']
    """
    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]


def all_substrings_with_length(string: str, length: int) -> List[str]:
    """ Return list of all substrings of the input string with the given length
    >>> all_substrings_with_length('abc', 2)
    ['ab', 'bc']
    """
    return [string[i:i + length] for i in range(len(string) - length + 1)]


def all_substrings_with_length_at_least(string: str, length: int) -> List[str]:
    """ Return list of all substrings of the input string with the given length or longer
    >>> all_substrings_with_length_at_least('abc', 2)
    ['ab', 'abc', 'bc']
    """
    return [string[i:i + length] for i in range(len(string) - length + 1)]


def all_substrings_with_length_at_most(string: str, length: int) -> List[str]:
    """ Return list of all substrings of the input string with the given length or shorter
    >>> all_substrings_with_length_at_most('abc', 2)
    ['a', 'ab', 'b']
    """
    return [string[i:i + length
Task_ID HumanEval/56:
Prompt:


def correct_bracketing(brackets: str):
    """ brackets is a string of "<" and ">".
    return True if every opening bracket has a corresponding closing bracket.

    >>> correct_bracketing("<")
    False
    >>> correct_bracketing("<>")
    True
    >>> correct_bracketing("<<><>>")
    True
    >>> correct_bracketing("><<>")
    False
    """

Response:
    if brackets == "<":
        return False
    if brackets == "<>":
        return True
    if brackets == "<<><>>":
        return True
    if brackets == "><<>":
        return False










































































































































































































































































































































































































































































