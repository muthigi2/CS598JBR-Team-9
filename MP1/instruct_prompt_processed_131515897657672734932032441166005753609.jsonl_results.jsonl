{"task_id": "HumanEval/126", "completion": "return lst == sorted(lst)\n\n\ndef is_sorted_v2(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return True. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted_v2([5]) \u279e True\n    is_sorted_v2([1, 2, 3, 4, 5]) \u279e True\n    is_sorted_v2([1, 3, 2, 4, 5]) \u279e False\n    is_sorted_v2([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted_v2([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted_v2([1, 3, 2, 4, 5, 6, 7]) \u279e True\n    is_sorted_v2([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted_v2([1, 2, 2, 2, 3, 4]) \u279e True\n    '''\n    return lst == sorted(lst)\n\n\ndef is_sorted_v3(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return True. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted_v3([5]) \u279e True\n    is_sorted_v3([1, 2, 3, 4, 5]) \u279e True\n    isorted_v3([1, 3, 2, 4, 5]) \u279e True\n    is_sorted_v3([1, 2, 3, 4, 5, 6]) \u279e True", "result": "failed: unterminated triple-quoted string literal (detected at line 71) (<string>, line 41)", "passed": false}
{"task_id": "HumanEval/79", "completion": "binary = bin(decimal)[2:]\n    return 'db' + binary + 'db'\n\n\ndef binary_to_decimal(binary):\n    \"\"\"You will be given a binary number and your task is to convert it to decimal\n    format. The function should return an integer.\n\n    The binary number will be a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'. There will be an extra\n    couple of characters 'db' at the beginning and at the end of the string. The extra\n    characters are there to help with the format.\n\n    Examples:\n    binary_to_decimal(\"db1111db\")   # returns 15\n    binary_to_decimal(\"db100000db\") # returns 32\n    \"\"\"\n    binary = binary[2:-2]\n    return int(binary, 2)\n\n\ndef decimal_to_hexadecimal(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    hexadecimal format. The function should return a string, with each character\n    representing a hexadecimal number.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_hexadecimal(15)   # returns \"dbFdb\"\n    decimal_to_hexadecimal(32)   returns \"db20db\"\n    \"\"\"\n    hexadecimal = hex(decimal)[2:]\n    return 'db' + hexadecimal + 'db'\n\n\ndef hexadecimal_to_decimal(hexadecimal):\n    \"\"\"You will be given a hexadecimal number and your task is to convert it to decimal\n    format. The function should return an integer.\n\n    The hexadecimal number will be a string, with each character representing a hexadecimal\n    number. There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples", "result": "failed: unexpected indent (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/23", "completion": "if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n\ndef strrev(string: str) -> str:\n    \"\"\" Return reversed string\n    >>> strrev('')\n    ''\n    >>> strrev('abc')\n    'cba'\n    \"\"\"\n    if string == '':\n        return string\n    else:\n        return strrev(string[1:]) + string[0]\n\n\ndef strsub(string: str, sub: str) -> int:\n    \"\"\" Return number of occurrences of sub in string\n    >>> strsub('', '')\n    1\n    >>> strsub('abc', '')\n    1\n    >>> strsub('abc', 'a')\n    1\n    >>> strsub('abc', 'abc')\n    1\n    >>> strsub('abcabc', 'abc')\n    2\n    >>> strsub('abcabc', 'b')\n    2\n    \"\"\"\n    if string == '':\n        if sub == '':\n            return 1\n        else:\n            return 0\n    elif sub == '':\n        return 1\n    elif string[0] == sub[0]:\n        if len(sub) == 1:\n            return 1 + strsub(string[1:], sub)\n        else:\n            return strsub(string[1:], sub[1:])\n    else:\n        return strsub(string[1:], sub)\n\n\ndef strrep(string: str, sub: str, rep: str) -> str:\n    \"\"\" Replace all occurrences of sub in string with rep\n    >>> strrep('', 'a', 'b')\n    ''\n    >>> strrep('a', 'a', 'b')\n    'b'\n    >>> strrep('aaa', 'a', 'b')\n    'bbb'\n    >>> strrep('abcabc', 'abc', '123')\n    '123123'\n    \"\"\"\n    if string == '':\n        return string\n    elif string[:len(sub)] == sub:\n        return rep + strrep(string[len(sub):], sub, rep)\n    else:", "result": "failed: unindent does not match any outer indentation level (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/113", "completion": "def count_odd(s):\n        return sum(1 for c in s if int(c) % 2 != 0)", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/99", "completion": "num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)", "result": "failed: unexpected indent (<string>, line 21)", "passed": false}
{"task_id": "HumanEval/2", "completion": "return number % 1\n\n\ndef main():\n    \"\"\"\n    Main function to test the other functions.\n    \"\"\"\n    print(f\"The number 3.5 has a decimal part of {truncate_number(3.5)}\")\n    print(f\"The number 4.7 has a decimal part of {truncate_number(4.7)}\")\n    print(f\"The number 10.99 has a decimal part of {truncate(10.99)}\")", "result": "failed: 'return' outside function (<string>, line 12)", "passed": false}
{"task_id": "HumanEval/107", "completion": "def is_palindrome(num):\n        return str(num) == str(num)[::-1]", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/66", "completion": "return sum(ord(c) for c in s if c.isupper())", "result": "failed: 'return' outside function (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/75", "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True", "result": "failed: ", "passed": false}
{"task_id": "HumanEval/4", "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(n - mean) for n in numbers) / len(numbers)\n\n\ndef mean_absolute_percentage_error(y_true: List[float], y_pred: List[float]) -> float:\n    \"\"\" For a given list of true values and predicted values, calculate Mean Absolute Percentage Error.\n    Mean Absolute Percentage Error is the average of the absolute percentage difference between the\n    predicted and actual values:\n    MAPE = [sum(|(y_true_i - y_pred_i) / y_true_i|) for y_true_i, y_pred_i in zip(y_true, y_pred)]\n    >>> mean_absolute_percentage_error([1.0, 2.0, 3.0, 4.0], [1.1, 1.9, 3.2, 3.8])\n    0.14285714285714285\n    \"\"\"\n    return sum(abs((y_true_i - y_pred_i) / y_true_i) for y_true_i, y_pred_i in zip(y_true, y_pred)) / len(y_true)\n\n\ndef mean_squared_error(y_true: List[float], y_pred: List[float]) - float:\n    \"\"\" For a given list of true values and predicted values, calculate Mean Squared Error.\n    Mean Squared Error is the average of the squares of the errors:\n    MSE = [sum((y_true_i - y_pred_i)^2) for y_true_i, y_pred_i in zip(y_true, y_pred)]\n    >>> mean_squared_error([1.0, 2.0, 3.0, 4.0], [1.1, 1.9, 3.2, 3.8])\n    0.04761904761904762\n    \"\"\"\n    return sum((y_true_i - y_pred_", "result": "failed: unexpected indent (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/102", "completion": "for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1", "result": "failed: unindent does not match any outer indentation level (<string>, line 14)", "passed": false}
{"task_id": "HumanEval/18", "completion": "count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count", "result": "failed: unexpected indent (<string>, line 13)", "passed": false}
{"task_id": "HumanEval/161", "completion": "if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])", "result": "failed: unindent does not match any outer indentation level (<string>, line 15)", "passed": false}
{"task_id": "HumanEval/139", "completion": "if n == 0:\n        return 1\n    else:\n        return n * special_factorial(n - )", "result": "failed: unindent does not match any outer indentation level (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/44", "completion": "if x < base:\n        return str(x)\n    else:\n        return change_base(x // base, base) + str(x % base)\n\n\ndef main():\n    import doctest\n    doctest.testmod()", "result": "failed: unindent does not match any outer indentation level (<string>, line 16)", "passed": false}
{"task_id": "HumanEval/51", "completion": "return ''.join([c for c in text if c.lower() not in 'aeiou'])", "result": "failed: 'return' outside function (<string>, line 19)", "passed": false}
{"task_id": "HumanEval/93", "completion": "vowels = 'aeiou'\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    ALPHABET = alphabet.upper()\n    encoded_message = ''\n\n    for char in message:\n        if char in alphabet:\n            encoded_message += ALPHABET[alphabet.index(char)]\n        elif char in ALPHABET:\n            encoded_message += alphabet[ALPHABET.index(char)]\n        elif char in vowels:\n            encoded_message += alphabet[(alphabet.index(char) + 2) % 26]\n        elif char in vowels.upper():\n            encoded_message += ALPHABET[(ALPHABET.index(char) + 2) % 26]\n        else:\n            encoded_message += char\n\n    return encoded_message", "result": "failed: unexpected indent (<string>, line 17)", "passed": false}
{"task_id": "HumanEval/91", "completion": "return sum(1 for c in S if c in '.?!')\n\n\ndef is_bored_v2(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!' and can be in uppercase or lowercase.\n   \n    For example:\n    >>> is_bored_v2(\"Hello world\")\n    0\n    >>> is_bored_v2(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for c in S if c in '.?!')\n\n\ndef is_bored_v3(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!' and can be in uppercase or lowercase.\n   \n    For example:\n    >>> is_bored_v3(\"Hello world\")\n    0\n    >>> is_bored_v3(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for c in S if c in '.?!')\n\n\ndef is_bored_v4(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!' and can be in uppercase or lowercase.\n   \n    For example:\n    >>> is_bored_v4(\"Hello world\")\n    0\n    >>> is_bored_v4(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    return sum(1 for c in S if c in '.?!')\n\n\ndef is_bored_v5(S):\n    \"\"\"\n    You'll be given a string of words, and your", "result": "failed: unterminated triple-quoted string literal (detected at line 79) (<string>, line 63)", "passed": false}
{"task_id": "HumanEval/14", "completion": "return [string[:i] for i in range(1, len(string) + 1)]\n\ndef all_suffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes('abc')\n    ['c', 'bc', 'abc']\n   \n    \"\"\"\n    return [string[i:] for i in range(len(string))]\n\ndef all_substrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1)]\n\ndef all_substrings_of_length(string: str, length: int) -> List[str]:\n    \"\"\" Return list of all substrings of the input string of the specified length\n    >>> all_substrings_of_length('abc', 2)\n    ['ab', 'bc']\n    \"\"\"\n    return [string[i:i + length] for i in range(len(string) - length + 1)]\n\ndef all_palindromes(string: str) -> List[str]:\n    \"\"\" Return list of all palindromes in the input string\n    >>> all_palindromes('abcba')\n    ['a', 'b', 'c', 'b', 'abcba']\n    \"\"\"\n    return [string[i:j] for i in range(len(string)) for j in range(i + 1, len(string) + 1) if string[i:j] == string[i:j][::-1]]\n\ndef all_palindromes_of_length(string: str, length: int) -> List[str]:\n    \"\"\" Return list of all palindromes in the input string of the specified length\n    >>> all_palindromes_of_length('abcba', 3)\n    ['abc', 'bcb']\n    \"\"\"\n    return [string[", "result": "failed: '[' was never closed (<string>, line 45)", "passed": false}
{"task_id": "HumanEval/56", "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack[-1] != \"<\":\n                return False\n            stack.pop()\n    return not stack\n\n\ndef test_correct_bracketing():\n    assert correct_bracketing(\"<\") == False\n    assert correct_bracketing(\"<>\") == True\n    assert correct_bracketing(\"<<><>>\") == True\n    assert correct_bracketing(\"><<>\") == False", "result": "failed: unexpected indent (<string>, line 17)", "passed": false}
