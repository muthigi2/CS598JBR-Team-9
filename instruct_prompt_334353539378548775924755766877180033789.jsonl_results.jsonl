{"task_id": "HumanEval/23", "completion": "    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n\ndef strrev(string: str) -> str:\n    \"\"\" Return reversed string\n    >>> strrev('')\n    ''\n    >>> strrev('abc')\n    'cba'\n    \"\"\"\n    if string == '':\n        return string\n    else:\n        return strrev(string[1:]) + string[0]\n\n\ndef strsub(string: str, sub: str) -> int:\n    \"\"\" Return number of occurrences of sub in string\n    >>> strsub('', '')\n    1\n    >>> strsub('abc', '')\n    1\n    >>> strsub('abc', 'a')\n    1\n    >>> strsub('abc', 'abc')\n    1\n    >>> strsub('abcabc', 'abc')\n    2\n    >>> strsub('abcabc', 'b')\n    2\n    \"\"\"\n    if string == '':\n        if sub == '':\n            return 1\n        else:\n            return 0\n    elif sub == '':\n        return 1\n    elif string[0] == sub[0]:\n        if len(sub) == 1:\n            return 1 + strsub(string[1:], sub)\n        else:\n            return strsub(string[1:], sub[1:])\n    else:\n        return strsub(string[1:], sub)\n\n\ndef strrep(string: str, sub: str, rep: str) -> str:\n    \"\"\" Replace all occurrences of sub in string with rep\n    >>> strrep('', 'a', 'b')\n    ''\n    >>> strrep('a', 'a', 'b')\n    'b'\n    >>> strrep('aaa', 'a', 'b')\n    'bbb'\n    >>> strrep('abcabc', 'abc', '123')\n    '123123'\n    \"\"\"\n    if string == '':\n        return string\n    elif string[:len(sub)] == sub:\n        return rep + strrep(string[len(sub):], sub, rep)\n    else:", "result": "failed: expected an indented block after 'else' statement on line 75 (<string>, line 78)", "passed": false}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n    c = Counter(lst)\n    for i in sorted(c.keys(), reverse=True):\n        if c[i] >= i:\n            return i\n    return -1\n\nprint(search([4, 1, 2, 2, 3, 1])) #== 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) #== 3\nprint(search([5, 5, 4, 4, 4])) #== -1\n\n# 2nd solution\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    from collections import Counter\n    c = Counter(lst)\n    for i in range(max(lst), 0, -1):\n        if c[i] >= i:\n            return i\n    return -1\n\nprint(search([4, 1, 2, 2, 3, 1])) #== 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) #== 3\nprint(search([5, 5, 4, 4, 4])) #== -1\n\n# 3rd solution\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n", "result": "failed: unterminated triple-quoted string literal (detected at line 85) (<string>, line 49)", "passed": false}
{"task_id": "HumanEval/104", "completion": "    def has_even_digit(n):\n        while n > 0:\n            if n % 2 == 0:\n                return True\n            n //= 10\n        return False\n\n    return sorted([n for n in x if not has_even_digit(n)])\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_unique_digits.py\nimport unittest\nfrom unique_digits import unique_digits\n\nclass TestUniqueDigits(unittest.TestCase):\n\n    def test_unique_digits(self):\n        self.assertEqual(unique_digits([15, 33, 1422, 1]), [1, 15, 33])\n        self.assertEqual(unique_digits([152, 323, 1422, 10]), [])\n        self.assertEqual(unique_digits([15, 333, 14222, 111]), [15, 333, 111])\n        self.assertEqual(unique_digits([1522, 3233, 142222, 1111]), [3233, 1111])\n\nif __name__ == '__main__':\n    unittest.main()def is_prime(n):\n    \"\"\"Check if a number is prime.\n\n    For example:\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(17)\n    True\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_is_prime.py\nimport unittest\nfrom is_prime import is_prime\n\nclass TestIsPrime", "result": "failed: invalid syntax (<string>, line 41)", "passed": false}
{"task_id": "HumanEval/53", "completion": "    return x + y\n\n\ndef subtract(x: int, y: int):\n    \"\"\"Subtract y from x\n    >>> subtract(5, 3)\n    2\n    >>> subtract(7, 2)\n    5\n   \n    \"\"\"\n    return x - y\n\n\ndef multiply(x: int, y: int):\n    \"\"\"Multiply x and y\n    >>> multiply(2, 3)\n    6\n    >>> multiply(5, 7)\n    35\n    \"\"\"\n    return x * y\n\n\ndef divide(x: int, y: int):\n    \"\"\"Divide x by y\n    >>> divide(6, 3)\n    2\n    >>> divide(35, 7)\n    5\n    \"\"\"\n    if y != 0:\n        return x // y\n    else:\n        return \"Error: Division by zero\"\n\n\ndef power(x: int, y: int):\n    \"\"\"Raise x to the power of y\n    >>> power(2, 3)\n    8\n    >>> power(5, 2)\n    25\n    \"\"\"\n    return x ** y\n\n\ndef square_root(x: int):\n    \"\"\"Calculate the square root of x\n    >>> square_root(4)\n    2\n    >>> square_root(16)\n    4\n    \"\"\"\n    return x ** 0.5\n\n\ndef cube_root(x: int):\n    \"\"\"Calculate the cube root of x\n    >>> cube_root(8)\n    2\n    >>> cube_root(27)\n    3\n    \"\"\"\n    return x ** (1. / 3.)\n\n\ndef factorial(x: int):\n    \"\"\"Calculate the factorial of x\n    >>> factorial(5)\n    120\n    >>> factorial(4)\n    24\n    \"\"\"\n    if x == 0:\n        return 1\n    else:\n        return x * factorial(x - 1)\n\n\ndef logarithm(x: int, base: int = 10):\n    \"\"\"Calculate the logarithm of x with the given base\n    >>> logarithm", "result": "failed: unterminated triple-quoted string literal (detected at line 112) (<string>, line 91)", "passed": false}
{"task_id": "HumanEval/163", "completion": "    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_v2(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_v2(2, 8) => [2, 4, 6, 8]\n    generate_integers_v2(8, 2) => [2, 4, 6, 8]\n    generate_integers_v2(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_v3(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_v3(2, 8) => [2, 4, 6, 8]\n    generate_integers_v3(8, 2) => [2, 4, 6, 8]\n    generate_integers_v3(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_v4(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_v4(2, 8) => [2, 4, 6, 8]\n    generate_integers_v4(8, 2) => [2, 4, 6, 8]\n    generate_integers_v4(10, 14) => []\n    \"\"\"\n   ", "result": "failed: Test 1", "passed": false}
{"task_id": "HumanEval/105", "completion": "    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    arr = [i for i in arr if 1 <= i <= 9]\n    arr.sort(reverse=True)\n    return [names[i-1] for i in arr]\n\n\nprint(by_length([2, 1, 1, 4, 5, 8, 2, 3]))  # [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\nprint(by_length([]))  # []\nprint(by(1, -1 , 55]))  # ['One']\n<jup(1, -1 , 55))  # ['One']\n<jupyter_output>\n['Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n[]\n['One']\n['One']\n<jupyter_text>\nProblem 2:\n<jupyter_code>\ndef is_prime(n):\n    \"\"\"\n    Given a number n, return True if it is a prime number and False if it is not.\n    A prime number is a number that has only two distinct positive divisors: 1 and itself.\n\n    For example:\n      n = 2   \n      return True\n\n      n = 4\n      return False\n\n      n = 17\n      return True\n\n      n = 100\n      return False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\nprint(is_prime(2))  # True\nprint(is_prime(4))  # False\nprint(is_prime(17))  # True\nprint(is_prime(100))  # False\n", "result": "failed: closing parenthesis ']' does not match opening parenthesis '(' (<string>, line 32)", "passed": false}
{"task_id": "HumanEval/101", "completion": "    return s.replace(',', '').split()\n\n\ndef main():\n    print(words_string(\"Hi, my name is John\"))\n    print(words_string(\"One, two, three, four, five, six\"))\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n# Output:\n# ['Hi', 'my', 'name', 'is', 'John']\n# ['One', 'two', 'three', 'four', 'five', 'six']\n\n# Explanation:\n# The function words_string splits the input string into words by removing commas and splitting the string by spaces.\n# The function words_string is then tested with two different strings. The output is an array of the words in the string.\n# The function words_string is correct as it returns the expected output for the given test cases.\n# The function words_string is implemented correctly and can be used to split a string of words into an array of words.\n# The function words_string is a simple and efficient way to split a string of words into an array of words.\n# The function words_string is a good example of how to use the split and replace methods in Python.\n# The function words_string is a good example of how to use the split method in Python.\n# The function words_string is a good example of how to use the replace method in Python.\n# The function words_string is a good example of how to use the split and replace methods in Python.\n# The function words_string is a good example of how to use the split and replace methods in Python.\n# The function words_string is a good example of how to use the split and replace methods in Python.\n# The function words_string is a good example of how to use the split and replace methods in Python.\n# The function words_string is a good example of how to use the split and replace methods in Python.\n# The function words_string is a good example of how to use the split and replace methods in Python.\n# The function words_string is a good example of how to use the split and replace methods in Python.\n# The function words_string is a good example of how to use the split and replace methods in Python.\n# The function words_string is a good example of how to use the split", "result": "passed", "passed": true}
{"task_id": "HumanEval/161", "completion": "    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    else:\n        return ''.join([char.upper() if char.islower() else char.lower() for char in s])\n\n\nprint(solve(\"1234\"))  # \"4321\"\nprint(solve(\"ab\"))  # \"AB\"\nprint(solve(\"#a@C\"))  # \"#A@c\"\nprint(solve(\"aBc\"))  # \"AbC\"\nprint(solve(\"1234ABC\"))  # \"4321abc\"\nprint(solve(\"aBc1234\"))  # \"AbC4321\"\nprint(solve(\"1234ab\"))  # \"4321AB\"\nprint(solve(\"1234AbC\"))  # \"4321aBc\"\nprint(solve(\"1234ABC\"))  # \"4321abc\"\nprint(solve(\"1234ab\"))  # \"4321AB\"\nprint(solve(\"1234AbC\"))  \"4321aBc\"\nprint(solve(\"1234ABC\"))  \"4321abc\"\nprint(solve(\"1234ab\"))  \"4321AB\"\nprint(solve(\"1234AbC\"))  \"4321aBc\"\nprint(solve(\"1234ABC\"))  \"4321abc\"\nprint(solve(\"1234ab\"))  \"4321AB\"\nprint(solve(\"1234AbC\"))  \"4321aBc\"\nprint(solve(\"1234ABC\"))  \"4321abc\"\nprint(solve(\"1234ab\"))  \"4321AB\"\nprint(solve(\"1234AbC\"))  \"4321aBc\"\nprint(solve(\"1234ABC\"))  \"4321abc\"\nprint(solve(\"123", "result": "failed: unterminated string literal (detected at line 40) (<string>, line 40)", "passed": false}
{"task_id": "HumanEval/65", "completion": "    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]\n\n\ndef is_prime(n):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_circular_prime(n):\n    \"\"\"Check if n is a circular prime.\n    A circular prime is a prime number that remains prime even after its digits are\n    cyclically shifted.\n    >>> is_circular_prime(11)\n    True\n    >>> is_circular_prime(13)\n    True\n    >>> is_circular_prime(19)\n    True\n    \"\"\"\n    digits = str(n)\n    for i in range(len(digits)):\n        if not is_prime(int(circular_shift(n, i))):\n            return False\n    return True\n\n\ndef count_circular_primes(n):\n    \"\"\"Count the number of circular primes less than n.\n    >>> count_circular_primes(100)\n    13\n    \"\"\"\n    return sum(is_circular_prime(i) for i in range(n))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(count_circular_primes(1000000))\n\n#euler_035.py\ndef is_prime(n):\n    \"\"\"Check if n is a prime number.\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n", "result": "failed: expected an indented block after 'if' statement on line 75 (<string>, line 77)", "passed": false}
{"task_id": "HumanEval/48", "completion": "    return text == text[::-1]\n\n\ndef is_prime(n: int):\n    \"\"\"\n    Checks if given number is a prime\n    >>> is_prime(2)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(13)\n    True\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** rt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef is_even(n: int):\n    \"\"\"\n    Checks if given number is even\n    >>> is_even(0)\n    True\n    >>> is_even(3)\n    False\n    >>> is_even(4)\n    True\n    \"\"\"\n    return n % 2 == 0\n\n\ndef is_odd(n: int):\n    \"\"\"\n    Checks if given number is odd\n    >>> is_odd(1)\n    True\n    >>> is_odd(2)\n    False\n    >>> is_odd(3)\n    True\n    \"\"\"\n    return n % 2 != 0\n\n\ndef is_leap_year(year: int):\n    \"\"\"\n    Checks if given year is a leap year\n    >>> is_leap_year(2000)\n    True\n    >>> is_leap_year(1900)\n    False\n    >>> is_leap_year(2004)\n    True\n    \"\"\"\n    if year % 4 != 0:\n        return False\n    elif year % 100 != 0:\n        return True\n    elif year % 400 != 0:\n        return False\n    else:\n        return True\n\n\ndef is_triangle(a: int, b: int, c: int):\n    \"\"\"\n    Checks if given lengths can form a triangle\n    >>> is_triangle(3, 4, 5)\n    True\n    >>> is_triangle(1, 1, 3)\n    False\n    >>> is_triangle(1, 2, 3)\n", "result": "failed: unterminated triple-quoted string literal (detected at line 108) (<string>, line 85)", "passed": false}
{"task_id": "HumanEval/6", "completion": "    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    test_cases = ['(()())', '((()))', '()', '((())()())']\n    for test_case in test_cases:\n        print(f\"Test case: {test_case}\")\n        print(f\"Result: {parse_nested_parens(test_case)}\")\n        print(\"---\")from typing import List\n\ndef find_duplicates(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of integers, 1 \u2264 a[i] \u2264 n (n = size of array), some elements appear twice and others appear once.\n    Find all elements that appear twice in this array.\n    Could you do it without extra space and in O(n) runtime?\n\n    >>> find_duplicates([4,3,2,7,8,2,3,1])\n    [2, 3]\n    \"\"\"\n    duplicates = []\n    for num in nums:\n        if nums[abs(num)-1] < 0:\n            duplicates.append(abs(num))\n        else:\n            nums[abs(num)-1] *= -1\n    return duplicates\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n    test_cases = [\n        [4,3,2,7,8,2,3,1],\n        [1,1,2]\n    ]\n    for test_case in test_cases:\n        print(f\"Test case: {test_case}\")\n        print(f\"Result: {find_", "result": "failed: invalid syntax (<string>, line 35)", "passed": false}
{"task_id": "HumanEval/130", "completion": "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n    elif n == 2:\n        return [0, 3, 2]\n    else:\n        sequence = [0, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[-1] + sequence[-2] + sequence[-3])\n        return sequence\n\n\nprint(tri(3))\nprint(tri(4))\nprint(tri(5))\nprint(tri(6))\nprint(tri(7))\nprint(tri(8))\nprint(tri(9))\nprint(tri(10))\nprint(tri(11))\nprint(tri(12))\nprint(tri(13))\nprint(tri(14))\nprint(tri(15))\nprint(tri(16))\nprint(tri(17))\nprint(tri(18))\nprint(tri(19))\nprint(tri(20))\nprint(tri(21))\nprint(tri(22))\nprint(tri(23))\nprint(tri(24))\nprint(tri(25))\nprint(tri(26))\nprint(tri(27))\nprint(tri(28))\nprint(tri(29))\nprint(tri(30))\nprint(tri(31))\nprint(tri(32))\nprint(tri(33))\nprint(tri(34))\nprint(tri(35))\nprint(tri(36))\nprint(tri(37))\nprint(tri(38))\nprint(tri(39))\nprint(tri(40))\nprint(tri(41))\nprint(tri(42))\nprint(tri(43))\nprint(tri(44))\nprint(tri(45))\nprint(tri(46))\nprint(tri(47))\nprint(tri(48))\nprint(tri(49))\nprint(tri(50))\nprint(tri(", "result": "failed: '(' was never closed (<string>, line 83)", "passed": false}
{"task_id": "HumanEval/125", "completion": "    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)\n\nprint(split_words(\"Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split(\"abcdef\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abcdef\"))\n<jupyter_output>\n['Hello', 'world']\n['Hello', 'world']\n3\n['abc', 'def']\n3\n<jupyter_text>\nQuestion 2\n<jupyter_code>\ndef count_vowels(txt):\n    '''\n    Given a string, return the number of vowels in the string.\n    Vowels are defined as: a, e, i, o, u\n    Examples\n    count_vowels(\"Hello world\") \u279e 3\n    count_vowels(\"Count the vowels\") \u279e 5\n    '''\n    return sum(1 for c in txt if c.lower() in 'aeiou')\n\nprint(count_vowels(\"Hello world\"))\nprint(count_vowels(\"Count the vowels\"))\n<jupyter_output>\n3\n5\n<jupyter_text>\nQuestion 3\n<jupyter_code>\ndef is_palindrome(txt):\n    '''\n    Given a string, return True if it is a palindrome (reads the same backward as forward), False otherwise.\n    Ignore case, punctuation and spaces.\n    Examples\n    is_palindrome(\"Hello world\") \u279e False\n    is_palindrome(\"A man, a plan, a canal: Panama\") \u279e True\n    '''\n    txt = ''.join(c for c in txt if c.isalnum()).lower()\n    return txt == txt[::-1]\n\nprint(is_palindrome(\"Hello world\"))\nprint(is_palindrome(\"A man, a plan,", "result": "failed: unterminated string literal (detected at line 63) (<string>, line 63)", "passed": false}
{"task_id": "HumanEval/67", "completion": "    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    total_fruits = int(n)\n    mangoes = total_fruits - apples - oranges\n    return mangoes\n\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))\nprint(fruitdistribution(\"0 apples and 1 oranges\",3))\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100))\nprint(fruit_distribution(\"100 apples and 1 oranges\",120))\n<jupyter_output>\n8\n2\n95\n19\n<jupyter_text>\nTask 2: Write a Python function that takes a list of integers and returns the sum of the squares of the even numbers in the list.\n<jupyter_code>\ndef sum_of_squares(lst):\n    \"\"\"\n    This function takes a list of integers and returns the sum of the squares of the even numbers in the list.\n    for example:\n    sum_of_squares([1,2,3,4,5,6]) -> 12 + 16 + 36 = 56\n    sum_of_squares([1,3,5,7,9,11]) -> 0\n    sum_of_squares([2,4,6,8,10,12,14,16,18,20]) -> 280\n    \"\"\"\n    return sum(i**2 for i in lst if i%2 == 0)\n\nprint(sum_of_squares([1,2,3,4,5,6]))\nprint(sum_of_squares([1,3,5,7,9,11]))\nprint(sum_of_squares([2,4,6,8,10,12,14,16,18,20]))\n<jup_of_squares([1,2,3,4,5,6])\n<jupyter_output>\n56\n0\n280\n<jupyter_text>\nTask ", "result": "failed: invalid syntax (<string>, line 26)", "passed": false}
{"task_id": "HumanEval/19", "completion": "    num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted(numbers.split(), key=lambda x: num_dict[x]))\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    print(sort_numbers('three one five'))  # 'one three five'\n    print(sort_numbers('nine eight seven'))  # 'seven eight nine'\n    print(sort_numbers('four six two'))  # 'two four six'\n    print(sort_numbers('one one two three'))  # 'one one two three'\n    print(sort_numbers('five four seven six'))  # 'four five six seven'\n    print(sort_numbers('nine zero one eight'))  # 'zero one eight nine'\n    print(sort_numbers('three two one'))  # 'one two three'\n    print(sort_numbers('seven six nine'))  # 'six seven nine'\n    print(sort_numbers('four one three'))  # 'one three four'\n    print(sort_numbers('nine seven two'))  # 'two seven nine'\n    print(sort_numbers('five eight four'))  # 'four five eight'\n    print(sort_numbers('six three one'))  # 'one three six'\n    print(sort_numbers('nine two seven'))  # 'two seven nine'\n    print(sort_numbers('four nine one'))  # 'one four nine'\n    print(sort_numbers('three seven five'))  # 'five seven three'\n    print(sort_numbers('six two four'))  # 'two four six'\n    print(sort_numbers('nine one eight'))  # 'one eight nine'\n    print(sort_numbers('four seven three')) ", "result": "passed", "passed": true}
{"task_id": "HumanEval/76", "completion": "    if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n    return True\n\n\nprint(is_simple_power(1, 4))  # => true\nprint(is_simple_power(2, 2))  # => true\nprint(issimple_power(8, 2))  # => true\nprint(is_simple_power(3, 2))  # => false\nprint(is_simple_power(3, 1))  # => false\nprint(is_simple_power(5, 3))  # => false\nprint(is_simple_power(64, 2))  # => true\nprint(is_simple_power(729, 3))  # => true\nprint(is_simple_power(1024, 2))  # => true\nprint(is_simple_power(1594323, 3))  # => true\nprint(is_simple_power(248832, 2))  # => true\nprint(is_simple_power(12906496, 2))  # => true\nprint(is_simple_power(12906496, 3))  # => false\nprint(is_simple_power(12906496, 4))  # => true\nprint(is_simple_power(12906496, 5))  # => false\nprint(is_simple_power(12906496, 6))  # => false\nprint(is_simple_power(12906496, 7))  # => false\nprint(is_simple_power(12906496, 8))  # => true\nprint(is_simple_power(12906496, 9))  # => false\nprint(is_simple_power(12906496, 10))  # => false\nprint(is_simple_power(1290649", "result": "failed: '(' was never closed (<string>, line 45)", "passed": false}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_fizz_buzz.py\nimport unittest\nfrom fizz_buzz import fizz_buzz\n\n\nclass TestFizzBuzz(unittest.TestCase):\n\n    def test_fizz_buzz(self):\n        self.assertEqual(fizz_buzz(50), 0)\n        self.assertEqual(fizz_buzz(78), 2)\n        self.assertEqual(fizz_buzz(79), 3)\n\n\nif __name__ == '__main__':\n    unittest.main()#src/config.py\nimport os\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    MAIL_SERVER = 'smtp.googlemail.com'\n    MAIL_PORT = 587\n    MAIL_USE_TLS = True\n    MAIL_USERNAME = os.environ.get('EMAIL_USER')\n    MAIL_PASSWORD = osos.environ.get('EMAIL_PASS')\n    SENDER_EMAIL = os.environ.get('SENDER_EMAIL')\n\n#src/forms.py\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, BooleanField, SubmitField, TextAreaField\nfrom wtforms.validators import DataRequired, Email, EqualTo, Length\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=64)])\n    email = StringField", "result": "failed: No module named 'fizz_buzz'", "passed": false}
{"task_id": "HumanEval/16", "completion": "    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v2(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v2('xyzXYZ')\n    3\n    >>> count_distinct_characters_v2('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v3(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v3('xyzXYZ')\n    3\n    >>> count_distinct_characters_v3('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v4(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v4('xyzXYZ')\n    3\n    >>> count_distinct_characters_v4('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v5(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v5('xyzXYZ')\n    3\n    >>> count_distinct_characters_v5('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\n\ndef count_distinct_characters_v6(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters_v6('xyzXYZ')\n    3\n    >>> count_distinct_characters_v6('Jerry')\n    4\n    \"\"\"\n", "result": "passed", "passed": true}
{"task_id": "HumanEval/149", "completion": "    lst = [i for i in lst if len(i) % 2 == 0]\n    return sorted(lst)\n\n\nprint(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\nprint(sorted_listum([\"aa\", \"a\", \"aaa\"]))\n\n# 1. Filter out the strings with odd lengths.\n# 2. Sort the list by length of each word.\n# 3. If two words have the same length, sort the list alphabetically.\n# 4. Return the sorted list.\n\n# def sorted_list_sum(lst):\n#     lst = [i for i in lst if len(i) % 2 == 0]\n#     return sorted(lst)\n\n# print(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n# print(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))\n\n# def sorted_list_sum(lst):\n#     lst = [i for i in lst if len(i) % 2 == 0]\n#     return sorted(lst)\n\n# print(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n# print(sortedorted_list_sum([\"aa\", \"a\", \"aaa\"]))\n\n# def sorted_list_sum(lst):\n#     lst = [i for i in lst if len(i) % 2 == 0]\n#     return sorted(lst)\n\n# print(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n# print(sorted_list_sum([\"aa\", \"a\", \"aaa\"]))\n\n# def sorted_list_sum(lst):\n#     lst = [i for i in lst if len(i) % 2 == 0]\n#     return sorted(lst)\n\n# print(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n# print(sorted_list_sum([\"aa\", \"a\", \"aaa\"]", "result": "failed: name 'sorted_listum' is not defined", "passed": false}
{"task_id": "HumanEval/75", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and is_prime(a)\n\n\nprint(is_multiply_prime(30))  # True\nprint(is_multiply_prime(105))  # True\nprint(is_multiply_prime(100))  # False\nprint(is_multiply_prime(120))  # False\nprint(is_multiply_prime(135))  # False\nprint(is_multiply_prime(150))  # False\nprint(is_multiply_prime(165))  # False\nprint(is_multiply_prime(180))  # False\nprint(is_multiply_prime(195))  # False\nprint(is_multiply_prime(210))  # False\nprint(is_multiply_prime(225))  # False\nprint(is_multiply_prime(240))  # False\nprint(is_multiply_prime(255))  # False\nprint(is_multiply_prime(270))  # False\nprint(is_multiply_prime(285))  # False\nprint(is_multiply_prime(300))  # False\nprint(is_multiply_prime(315))  # False\nprint(is_multiply_prime(330))  # False\nprint(is_multiply_prime(345))  # False\nprint(is_multiply_prime(360))  # False\nprint(is_multiply_prime(375))", "result": "failed: ", "passed": false}
